name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  find-version:
    runs-on: ubuntu-latest
    outputs:
      project_version: ${{ steps.define_version.outputs.project_version }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Define version
        id: define_version
        run: |
          PROJECT_VERSION=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "::set-output name=project_version::$PROJECT_VERSION"

  linux-jpackage:
    runs-on: ubuntu-18.04
    needs: find-version
    steps:
      - uses: actions/checkout@v2

      - name: Setup Gluon's GraalVM
        uses: gluonhq/setup-graalvm@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install libraries
        run: |
          sudo apt update
          sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev

      - name: Make staging directory
        run: |
          mkdir staging

      - name: Gluon License
        uses: gluonhq/gluon-build-license@master
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}
          dir: App

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and package
        run: mvn clean install && mvn package -f App

      - name: Create Bundle using jpackage
        id: outputfile
        run: |
          .github/scripts/build_app_linux.sh \
          --type deb
          mv App/target/installer/*.deb staging/ChatApp-${{ env.APP_VERSION }}.deb
          echo ::set-output name=pathDeb::staging/ChatApp-${{ env.APP_VERSION }}.deb
          .github/scripts/build_app_linux.sh \
          --type rpm
          mv App/target/installer/*.rpm staging/ChatApp-${{ env.APP_VERSION }}.rpm
          echo ::set-output name=pathRpm::staging/ChatApp-${{ env.APP_VERSION }}.rpm
        env:
          PROJECT_VERSION: ${{needs.find-version.outputs.project_version}}
          APP_VERSION: 1.0.0

      - name: Upload installer (deb)
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageLinux (deb)
          path: ${{ steps.outputfile.outputs.pathDeb }}

      - name: Upload installer (rpm)
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageLinux (rpm)
          path: ${{ steps.outputfile.outputs.pathRpm }}


  linux-native:
    runs-on: ubuntu-18.04
    needs: find-version
    steps:
      - uses: actions/checkout@v2

      - name: Setup Gluon's GraalVM
        uses: gluonhq/setup-graalvm@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install libraries
        run: |
          sudo apt update
          sudo apt install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev

      - name: Make staging directory
        run: |
          mkdir staging

      - name: Gluon License
        uses: gluonhq/gluon-build-license@master
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}
          dir: App

      - name: Gluon Build
        run: |
          ls App/src/main/resources
          mvn install && mvn -Pdesktop gluonfx:build gluonfx:package -f App

      - name: Copy native image to staging
        run: cp -r App/target/gluonfx/x86_64-linux/ChatApp* staging

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: NativePackageLinux
          path: staging


  macos-jpackage:
    runs-on: macos-latest
    needs: find-version
    steps:
      - uses: actions/checkout@v2

      - name: Make staging directory
        run: mkdir staging

      - name: Gluon License
        uses: gluonhq/gluon-build-license@master
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}
          dir: App

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and package
        run: mvn clean install && mvn package -f App

      - name: Create Bundle using jpackage
        id: outputfile
        run: |
          .github/scripts/build_app_mac.sh
          echo ::set-output name=path::App/target/installer/ChatApp-${{ env.APP_VERSION }}.pkg
        env:
          GLUON_MACSIGN_PREFIX: ${{ secrets.GLUON_MACSIGN_PREFIX }}
          GLUON_MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}
          PROJECT_VERSION: ${{needs.find-version.outputs.project_version}}
          APP_VERSION: 1.0.0

      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageMac
          path: ${{ steps.outputfile.outputs.path }}


  macos-native:
    runs-on: macos-latest
    needs: find-version
    steps:
      - uses: actions/checkout@v2

      - name: Setup Gluon's GraalVM
        uses: gluonhq/setup-graalvm@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Developer ID Application certificate
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          keychain: ${{ github.run_id }}
          keychain-password: ${{ github.run_id }}
          p12-file-base64: ${{ secrets.GLUON_MACOS_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.GLUON_MACOS_CERTIFICATES_PASSWORD }}

      - name: Make staging directory
        run: mkdir staging

      - name: Gluon License
        uses: gluonhq/gluon-build-license@master
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}
          dir: App

      - name: Gluon Build and Package
        run: |
          mvn clean install && mvn -Pdesktop,mac gluonfx:build gluonfx:package -f App
          echo ::set-output name=path::App/target/installer/ChatApp-1.0.0.pkg
        env:
          GLUON_MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}

      - name: Notarize Installer
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: erwin1/xcode-notarize@main
        with:
          product-path: ${{ steps.outputfile.outputs.path }}
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          primary-bundle-id: com.gluonhq.chatapp.App
          asc-provider: ${{ secrets.GLUON_MACSIGN_PREFIX }}
          verbose: false

      - name: Copy native image to staging
        run: |
          cp -r App/target/gluonfx/x86_64-darwin/ChatApp* staging
          cp -r App/target/gluonfx/x86_64-darwin/gvm/*.json staging
          cp -r App/target/gluonfx/x86_64-darwin/gvm/log/* staging
          
      - name: Upload native image
        uses: actions/upload-artifact@v2
        with:
          name: NativePackageMac
          path: staging

      - name: Provisioning Profile
        if: ${{ github.ref == 'refs/heads/master' }}
        id: provisioning
        uses: Apple-Actions/download-provisioning-profiles@v1.0.1
        with:
          bundle-id: com.gluonhq.chatapp.App
          profile-type: 'MAC_APP_STORE'
          issuer-id: ${{ secrets.GLUON_IOS_APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.GLUON_IOS_APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.GLUON_IOS_APPSTORE_PRIVATE_KEY }}

      - name: Rename profiles
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          find /Users/runner/Library/MobileDevice -name '*.mobileprovision' -exec sh -c 'mv "$0" "${0%.mobileprovision}.provisionprofile"' {} \;

      - name: 3rd Party Mac certificate
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          keychain: ${{ github.run_id }}
          keychain-password: ${{ github.run_id }}
          create-keychain: false
          p12-file-base64: ${{ secrets.GLUON_MACOS_STORE_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.GLUON_MACOS_STORE_CERTIFICATES_PASSWORD }}

      - name: Gluon Package Store
        id: outputfilestore
        run: |
          mvn -Pdesktop,macstore gluonfx:package -f App
          echo ::set-output name=path::App/target/gluonfx/x86_64-darwin/ChatApp-1.0.0.pkg
        env:
          GLUON_MACSIGN_USER: ${{ secrets.GLUON_MACSIGN_USER }}

      - name: Upload (pkg store)
        uses: actions/upload-artifact@v2
        with:
          name: PackageAppStore
          path: ${{ steps.outputfilestore.outputs.path }}

      - name: Upload App Store TestFlight
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: Apple-Actions/upload-testflight-build@master
        with:
          app-path: ${{ steps.outputfilestore.outputs.path }}
          app-type: osx
          issuer-id: ${{ secrets.GLUON_IOS_APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.GLUON_IOS_APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.GLUON_IOS_APPSTORE_PRIVATE_KEY }}

  windows-jpackage:
    runs-on: windows-latest
    needs: find-version
    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Visual Studio shell
        uses: egor-tensin/vs-shell@v1

      - name: Make staging directory
        run: mkdir staging

      - name: Gluon License
        uses: gluonhq/gluon-build-license@master
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}
          dir: App

      - name: Setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build and package
        run: mvn clean install && mvn package -f App

      - name: Create Bundle using jpackage
        id: outputfile
        shell: cmd
        run: |
          call .github\scripts\build_app_windows.bat
          echo ::set-output name=path::App\target\installer\ChatApp-${{ env.APP_VERSION }}.msi
        env:
          PROJECT_VERSION: ${{needs.find-version.outputs.project_version}}
          APP_VERSION: 1.0.0

      - name: Upload installer
        uses: actions/upload-artifact@v2
        with:
          name: InstallerPackageWindows
          path: ${{ steps.outputfile.outputs.path }}



  windows-native:
    if: ${{ false }}
    runs-on: windows-latest
    needs: find-version
    steps:
      - uses: actions/checkout@v2

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Visual Studio shell
        uses: egor-tensin/vs-shell@v1

      - name: Setup Gluon's GraalVM
        uses: gluonhq/setup-graalvm@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Make staging directory
        run: mkdir staging

      - name: Gluon License
        uses: gluonhq/gluon-build-license@master
        with:
          gluon-license: ${{ secrets.GLUON_LICENSE }}
          dir: App

      - name: Gluon Build
        run: mvn install && mvn -Pdesktop gluonfx:build gluonfx:package -f App

      - name: Copy native image to staging
        run: cp -r App/target/gluonfx/x86_64-windows/ChatApp.exe staging

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: NativePackageWindows
          path: staging

